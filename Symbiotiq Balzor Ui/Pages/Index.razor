@page "/"
@using Symbiotiq_Balzor_Ui.Data_Access
@using Symbiotiq_Balzor_Ui.Models
@inject IMongoFoodItemData foodItemData
@inject IMongoNonFoodItemData nonFoodItemData
@inject IAuthService authService
@inject NavigationManager navManager


@if (authService.CurrentUser != null && loggedInUser != null)
{
    <div>
        <h3>My Account</h3>
        <p>
            <a>
                Edit My Profile
            </a>
        </p>
    </div>

    <div class="user-info-container">
        <div class="user-avatar-container">
            <img class="user-avatar-img" src="../Images/maleavatar.png" />
        </div>
        <div class="user-name-container">
            <div class="profile-page-container-spacer">
            </div>
            <div class="user-name-text">
                <h3> Welcome @authService.CurrentUser.DisplayName </h3>
            </div>
        </div>
    </div>


    <div class="trust-points-container">
        <div class="trust-points-text-container">
            <h5>Trust Points:</h5>
        </div>
        <div class="trust-points-value-conatiner">
            <div class="trust-points-value">
                <h5>@loggedInUser.Trustpoints</h5>
            </div>
        </div>
    </div>


    <h3>Your Current Listings</h3>

    @if (foodItems != null)
    {
        @foreach (var item in foodItems)
        {
            @if (item.ItemDonater == loggedInUser.Id)
            {
                <div class="user-listings-container">
                    <div class="user-single-listing-cotainer">
                        <div class="left-side-of-listing-container">
                            <div class="listing-title">
                                <h6>
                                    @item.ItemTitle
                                </h6>
                            </div>
                            <div class="listing-img">
                                <img src="../Images/foodavatar.png" />
                            </div>
                        </div>
                        <div class="right-side-of-listing-container">
                            <div class="avaialability-toggle-button-container">
                                @*                                 <button class="avaialability-toggle-button btn-primary">Available</button> *@
                            </div>
                            <div class="action-buttons-container">
                                <div class="edit-post-button-container">
                                    <button @onclick="()=>EditFoodPost(item)" class="edit-post-button btn-primary">Edit Post</button>
                                </div>
                                <div class="delete-post-button-container">
                                    <button @onclick="()=>DeleteFoodPost(item)" class="delete-post-button delete-btn">Delete Post</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    }

    @if (nonFoodItems != null)
    {
        @foreach (var item in nonFoodItems)
        {
            @if (item.ItemDonater == loggedInUser.Id)
            {
                <div class="user-listings-container">
                    <div class="user-single-listing-cotainer">
                        <div class="left-side-of-listing-container">
                            <div class="listing-title">
                                <h6>
                                    @item.ItemTitle
                                </h6>
                            </div>
                            <div class="listing-img">
                                <img src="../Images/foodavatar.png" />
                            </div>
                        </div>
                        <div class="right-side-of-listing-container">
                            <div class="avaialability-toggle-button-container">
                                @*                                 <button class="avaialability-toggle-button btn-primary">Available</button> *@
                            </div>
                            <div class="action-buttons-container">
                                <div class="edit-post-button-container">
                                    <button @onclick="()=>EditNonFoodPost(item)" class="edit-post-button btn-primary">Edit Post</button>
                                </div>
                                <div class="delete-post-button-container">
                                    <button @onclick="()=>DeleteNonFoodPost(item)" class="delete-post-button delete-btn">Delete Post</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    }



}

else
{
    <div class="page-container">
        <div>
            <div class="login-container">
                <h3>Login</h3>
                <form @onsubmit="HandleLogin">
                    <label for="email">Email:</label>
                    <input type="email" id="email" @bind="email" />

                    <label for="password">Password:</label>
                    <input type="password" id="password" @bind="password" />

                    <button type="submit">Login</button>
                </form>
            </div>

            <div class="create-account-constainer">
                <span>Dont have an account yet? <a href="/CreateAccount">Create one</a></span>
            </div>

        </div>
    </div>
}

@code {


    private string? email;
    private string? password;

    private UserModel? loggedInUser;
    private List<NonFoodItemModel>? nonFoodItems;
    private List<FoodItems>? foodItems;

    protected async override Task OnInitializedAsync()
    {
        authService.OnAuthenticationChanged += async () => await Refresh();
        foodItems = await foodItemData.GetAllFoodItems();
        nonFoodItems = await nonFoodItemData.GetAllNonFoodItems();
        if (loggedInUser is not null)
        {
            loggedInUser = await authService.GetCurrentUser(loggedInUser.Id);
            StateHasChanged();
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await authService.InitializeAsync();
            loggedInUser = authService.CurrentUser;
            if(loggedInUser is not null)
            {
                loggedInUser = await authService.GetCurrentUser(loggedInUser.Id);
                StateHasChanged();
            }

        }
    }

    public async Task Refresh()
    {
        foodItems = await foodItemData.GetAllFoodItems();
        nonFoodItems = await nonFoodItemData.GetAllNonFoodItems();
        if (loggedInUser is not null)
        {
            loggedInUser = await authService.GetCurrentUser(loggedInUser.Id);
            StateHasChanged();
        }
        StateHasChanged();
    }

    private void HandleLogout()
    {
        loggedInUser = null;
        authService.Logout();
        StateHasChanged();
    }

    private async Task HandleLogin()
    {
        bool loginResult = await authService.Login(email, password);

        if (loginResult)
        {
            loggedInUser = authService.CurrentUser;

            if (authService.CurrentUser?.JobTitle == "Admin")
            {
                navManager.NavigateTo("/");
                StateHasChanged();
            }
            else
            {
                navManager.NavigateTo("/");
                StateHasChanged();
            }
        }

    }

    private void EditFoodPost(FoodItems foodItem)
    {
        navManager.NavigateTo($"/itemInfo/{foodItem.Id}");
    }

    private void EditNonFoodPost(NonFoodItemModel nonFoodItem)
    {
        navManager.NavigateTo($"/itemInfo/{nonFoodItem.Id}");
    }

    private async Task DeleteFoodPost(FoodItems foodItem)
    {
        await foodItemData.RemoveItem(foodItem.Id);
        await Refresh();
    }

    private async Task DeleteNonFoodPost(NonFoodItemModel nonFoodItem)
    {
        await nonFoodItemData.RemoveItem(nonFoodItem.Id);
        await Refresh();
    }






}